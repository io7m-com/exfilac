<?xml version="1.0" encoding="UTF-8" ?>

<Schemas xmlns="urn:com.io7m.trasco.database.statements:1:0">
  <Schema versionCurrent="0">
    <Comment>
      The schema version table stores the current version of the database schema. Implementations
      are expected to query this table on connecting to the database in order to ensure that the
      calling code is compatible with the tables in the database.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE schema_version (
  version_lock            INTEGER NOT NULL DEFAULT 1,
  version_application_id  TEXT    NOT NULL,
  version_number          INTEGER NOT NULL,

  CONSTRAINT check_lock_primary PRIMARY KEY (version_lock),
  CONSTRAINT check_lock_locked CHECK (version_lock = 1)
) STRICT
]]></Statement>
  </Schema>

  <Schema versionCurrent="1">
    <Comment>
      The buckets table describes the S3 buckets.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE buckets (
  bucket_id            INTEGER NOT NULL PRIMARY KEY,
  bucket_ref_name      TEXT    NOT NULL,
  bucket_name          TEXT    NOT NULL,
  bucket_region        TEXT    NOT NULL,
  bucket_access_key    TEXT    NOT NULL,
  bucket_secret        TEXT    NOT NULL,
  bucket_access_style  TEXT    NOT NULL,
  bucket_endpoint      TEXT    NOT NULL,

  CONSTRAINT bucket_ref_name_unique
    UNIQUE (bucket_ref_name)

) STRICT
]]></Statement>

    <Comment>
      The upload_configurations table associates a bucket and a device directory with an upload
      policy. The policy describes _when_ data will be uploaded, and also describes other aspects
      such as where exactly in the bucket data will be uploaded.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE upload_configurations (
  upload_configuration_id   INTEGER NOT NULL PRIMARY KEY,
  upload_name               TEXT    NOT NULL,
  upload_device_source      TEXT    NOT NULL,
  upload_bucket_id          INTEGER NOT NULL,
  upload_policy             BLOB    NOT NULL,

  CONSTRAINT upload_name_unique
    UNIQUE (upload_name),

  CONSTRAINT upload_configurations_bucket_exists
    FOREIGN KEY (upload_bucket_id)
      REFERENCES buckets (bucket_id)
        ON DELETE CASCADE

) STRICT
]]></Statement>
  </Schema>

  <Schema versionCurrent="2">
    <Comment>
      The upload_records table stores records of upload attempts. The tables are denormalized
      because we want to capture the information as it was when the upload was performed, not
      the information (such as the bucket configuration) as it is _now_.
    </Comment>

    <Comment>
      All "time"-based columns are specified as milliseconds since the Unix epoch, in UTC.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE upload_records (
  upload_record_id          INTEGER NOT NULL PRIMARY KEY,
  upload_record_time_start  INTEGER NOT NULL,
  upload_record_time_end    INTEGER,
  upload_name               TEXT    NOT NULL,
  upload_bucket             TEXT,
  upload_reason             TEXT    NOT NULL,
  upload_files_required     INTEGER NOT NULL,
  upload_files_skipped      INTEGER NOT NULL,
  upload_files_uploaded     INTEGER NOT NULL,
  upload_files_failed       INTEGER NOT NULL,
  upload_result             TEXT
) STRICT
]]></Statement>

    <Comment>
      The upload_events table stores the events associated with an upload.
    </Comment>

    <Comment>
      All "time"-based columns are specified as milliseconds since the Unix epoch, in UTC.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE upload_events (
  upload_event_id          INTEGER PRIMARY KEY NOT NULL,
  upload_event_record_id   INTEGER             NOT NULL,
  upload_event_time        INTEGER             NOT NULL,
  upload_event_message     TEXT                NOT NULL,
  upload_event_file        TEXT,
  upload_event_exception   TEXT,
  upload_event_failed      INTEGER             NOT NULL,

  CONSTRAINT upload_event_unique
    UNIQUE (upload_event_id, upload_event_record_id),

  CONSTRAINT upload_events_upload_exists
    FOREIGN KEY (upload_event_record_id)
      REFERENCES upload_records (upload_record_id)
        ON DELETE CASCADE
) STRICT
]]></Statement>
  </Schema>

  <Schema versionCurrent="3">
    <Comment>
      The settings table stores the global application settings.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE settings (
  settings_lock   INTEGER NOT NULL DEFAULT 1,
  settings_text   BLOB    NOT NULL,

  CONSTRAINT settings_check_lock_primary PRIMARY KEY (settings_lock),
  CONSTRAINT settings_check_lock_locked CHECK (settings_lock = 1)
) STRICT
]]></Statement>
  </Schema>
</Schemas>
